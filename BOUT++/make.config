# configuration file for BOUT++
# September 2008: Converted to use autoconf. Can be manually edited
# for the (very) rare occasions when autoconf fails

# extra compilation flags:
# -DCHECK      Enables a host of additional checks on each operation
#              such as uninitialised data. Helps when debugging
# -DTRACK      Keeps track of variable names.
#              Enables more useful error messages
# -DMETRIC3D   Metrics now become 3D (EXPERIMENTAL, INCOMPLETE)
# for SSE2: -msse2 -mfpmath=sse
# 
# This must also specify one or more file formats
# -DPDBF  PDB format (need to include pdb_format.cpp)
# -DNCDF  NetCDF format (nc_format.cpp)

BOUT_FLAGS		= $(CFLAGS)  -O -DCHECK=2 -DSIGHANDLE -DNCDF

# Specify the MPI C and C++ compilers in CXX and CC respectively

CC						= mpicc
CXX						= mpicxx

AR						= ar
RANLIB				= ranlib
MKDIR					= mkdir -p

####################################
# Do not need to alter anything below
####################################

LD						= $(CXX)

# These are used for compiling physics modules using BOUT++ library

####################################
# Extra (optional) source files, includes and libs
# NOTE: EXTRA_SRC must include a solver (solver.cpp or ida_solver.cpp)
#       and a file format (nc_format.cpp or pdb_format.cpp)
####################################

EXTRA_INCS		=  -I$(PVODE)/include -I$(PVODE)/precon -I/usr/include -I/usr//include
EXTRA_LIBS		=  -L$(PVODE)/lib -lpvode -lpvpre -L/usr/lib -lfftw3 -L/usr//lib -lnetcdf_c++ -lnetcdf



PVODE					= $(BOUT_TOP)/PVODE

SOLVER_SOURCE	=  cvode_solver.cpp
PRECON_SOURCE	= 
FILEIO_SOURCE	=  nc_format.cpp

####################################
# These are used for compiling physics modules using BOUT++ library
####################################

CONFIG_FILES	= $(BOUT_TOP)/make.config $(BOUT_TOP)/makefile

OBJ						= $(SOURCEC:%.cpp=%.o)
LIB						= $(BOUT_TOP)/lib/libbout++.a

BOUT_INCLUDE	= -I. -I$(BOUT_TOP)/include/ $(EXTRA_INCS) $(INCLUDE)
BOUT_LIBS			= -lm -L$(BOUT_TOP)/lib/ -lbout++ $(EXTRA_LIBS)

# Need to use ifndef because TARGET could be set in a file (as opposed to the command line or environment variable)
# This will set a default if no TARGET is provided

ifndef TARGET
TARGET				= $(SOURCEC:%.cpp=%)
endif



####################################
# Definining stuff for recursive make
####################################

# Phony targets since they are directory names
.PHONY: $(DIRS)
.PHONY: lib

all: $(CONFIG_FILES) $(DIRS) $(OBJ) $(TARGET) 

####################################
# Recursively run make through subdirs
####################################

$(DIRS):
	@$(MAKE) -s -C $@ all

# Create 'lib' and 'include' incase they don't exist
$(BOUT_TOP)/include $(BOUT_TOP)/lib:
	$(MKDIR) $@

####################################
# Builds the library with $(OBJ) which is defined from the SOURCEC variable
####################################

# A bit of a clever hack that determines wheter the TARGET variable is 'lib'
# then, if true, adds the .o files to libbout++.a, else, it links the .o's
# into an executable
ifeq ("$(TARGET)", "lib")
lib: $(CONFIG_FILES) $(BOUT_TOP)/include $(BOUT_TOP)/lib
ifneq ("$(OBJ)foo", "foo")
	@echo "Adding $(OBJ) to libbout++.a"
	@$(AR) cru $(LIB) $(OBJ)
	@$(RANLIB) $(LIB)
endif
ifneq ("$(SOURCEH)foo", "foo")
	@cp $(SOURCEH) $(BOUT_TOP)/include
endif
else
$(TARGET): $(BOUT_TOP)/lib/libbout++.a Makefile
	$(LD) -o $(TARGET) $(OBJ) $(BOUT_LIBS)
endif

####################################
# The prerquisites of any .o file should depend on
# $(BOUT_TOP)/make.config
# $(BOUT_TOP)/makefile
# which are generated by configuration
####################################

%.o: $(CONFIG_FILES) %.cpp
	@echo "  Compiling " $(@F:.o=.cpp)
	@$(CXX) $(BOUT_FLAGS) -DMD5SUM=$(CHECKSUM) -c $(@F:.o=.cpp) -o $@ $(BOUT_INCLUDE)

clean::
	@-$(RM) $(OBJ) $(TARGET)
	@for pp in $(DIRS); do $(MAKE) -C $$pp clean; done
